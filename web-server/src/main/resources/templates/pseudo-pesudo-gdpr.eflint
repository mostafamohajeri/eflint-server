// design choices:
// nonidentifiable person / person / subject
// duty to enable/remove access
// stored consent required for using data (rather than just given consent)

// to discuss:
// GDPR-compliant, how to indicate/check in a frame (META)
// duty of controller to notify subjects of data breach (maintenance goal??)
// ambiguities in pseudoGDPR doc


#
// design choices:
// nonidentifiable person / person / subject
// duty to enable/remove access
// stored consent required for using data (rather than just given consent)

// to discuss:
// GDPR-compliant, how to indicate/check in a frame (META)
// duty of controller to notify subjects of data breach (maintenance goal??)
// ambiguities in pseudoGDPR doc

Fact person     // DIFF: "Identified by String" is the default
Fact controller

Fact purpose
  Identified by <purposes>

Fact datatype
  Identified by <datatypes>

Fact personal data // DIFF: using "personal data" instead of "data" (to make it clear that there is an associateed person)
  Identified by person * datatype
  Present when person

Fact consent 
  Identified by personal data * purpose

Fact stored consent
  Identified by controller * consent

Act give consent 
  Actor person
  Recipient controller
  Related to
    personal data, 
    purpose
  When personal data.person == person
  Conditioned by      // DIFF: explicating pre-conditions
    personal data &&
    person &&
    !(consent())
  Creates 
    consent(),
    revoke consent(consent = consent())     // DIFF: revoking consent is only possible after it has been given
  Present when person && controller

Act collect consent
  Actor controller
  Recipient person
  Related to  
    consent
    When consent.personal data.person == person
  Conditioned by 
    consent && 
    controller &&
    person
  Creates 
    stored consent()
  Terminates
    duty to remove consent() // DIFF
  Present when controller && person && consent

Act use data
  Actor controller
  Recipient person
  Related to
    personal data,
    purpose
    When personal data.person == person
  Conditioned by
    controller &&
    person &&
    personal data &&
    stored consent(consent = consent())
  Present when controller && person && personal data && purpose

Act revoke consent
  Actor person
  Recipient controller
  Related to 
    consent 
    When consent.(personal data).person == person
  Conditioned by 
    person &&
    controller &&
    consent
  Creates
    duty to remove consent(),
    give consent() // DIFF: now that consent is revoked, it can be given again
  Terminates 
    consent // DIFF: retract the fact that models that consent has been given in the past
  Present when person && controller && consent

Duty duty to remove consent
  Holder controller
  Claimant person
  Related to
    consent
    When consent.(personal data).person == person

Act remove consent
  Actor controller
  Recipient person
  Related to
    consent
    When consent.(personal data).person == person
  Conditioned by
    controller &&
    person &&
    stored consent() // `stored consent` must exist to make it removeable
  Terminates
    stored consent(),
    duty to remove consent()
  Present when controller && person && consent

##



###


