// design choices:
// nonidentifiable person / person / subject
// duty to enable/remove access
// stored consent required for using data (rather than just given consent)

// to discuss:
// GDPR-compliant, how to indicate/check in a frame (META)
// duty of controller to notify subjects of data breach (maintenance goal??)
// ambiguities in pseudoGDPR doc


#
// design choices:
// nonidentifiable person / person / subject
// duty to enable/remove access
// stored consent required for using data (rather than just given consent)

// to discuss:
// GDPR-compliant, how to indicate/check in a frame (META)
// duty of controller to notify subjects of data breach (maintenance goal??)
// ambiguities in pseudoGDPR doc

Fact person     // DIFF: "Identified by String" is the default
Fact controller
Fact datatype

Fact subject
  Identified by person

Fact personal data // DIFF: using "personal data" instead of "data" (to make it clear that there is an associateed person)
  Identified by person * datatype

Fact purpose
  Identified by "research" + "revenue"

Fact consent 
  Identified by personal data * purpose

Placeholder access holder For person
Fact access
  Identified by access holder * personal data

Fact stored data
  Identified by controller * personal data

Fact stored consent
  Identified by controller * consent

Act give consent 
  Actor subject 
  Recipient controller
  Related to        // "Related to" instead of "Object"
    personal data, 
    purpose
  When personal data.person == subject.person
  Conditioned by      // DIFF: explicating pre-conditions
    personal data &&
    subject &&
    !(consent())
  Creates 
    consent(),
    revoke consent(consent = consent())     // DIFF: revoking consent is only possible after it has been given

Act collect consent
  Actor controller
  Recipient subject
  Related to  
    consent
    When consent.personal data.person == subject.person
  Conditioned by 
    consent && 
    controller &&
    subject
  Creates 
    stored consent()
  Terminates
    duty to remove consent() // DIFF

Act use data
  Actor controller
  Recipient subject
  Related to
    personal data,
    purpose
    When personal data.person == subject.person
  Conditioned by
    controller &&
    subject &&
    personal data &&
    stored consent(consent = consent())

Act store data
  Actor controller
  Recipient subject
  Related to
    personal data
  When personal data.person == subject.person
  Creates
    stored data()

Placeholder other purpose For purpose
Act request to modify consent
  Actor subject
  Recipient controller
  Related to
    consent,
    other purpose
    When consent.(personal data).person == subject.person
  Conditioned by
    consent &&
    subject && controller
  Creates
    duty to modify consent()

Duty duty to modify consent
  Holder controller
  Claimant subject
  Related to
    consent,
    other purpose
    When consent.(personal data).person == subject.person

Act modify consent
  Actor controller
  Recipient subject
  Related to
    consent,
    other purpose     
    When consent.(personal data).person == subject.person
  Conditioned by 
    controller && 
    subject &&
    consent && 
    duty to modify consent() 
  Creates
    consent(personal data = consent.(personal data)
           ,purpose = other purpose) // DIFF: instead of consent^new
  Terminates
    consent,
    duty to modify consent()
  Present when // DIFF: necessary to ensure that the duty mentioned below "enables" this act
    Present duty to modify consent()

Act revoke consent
  Actor subject
  Recipient controller
  Related to 
    consent 
    When consent.(personal data).person == subject.person
  Conditioned by 
    subject &&
    controller &&
    consent
  Creates
    duty to remove consent(),
    give consent() // DIFF: now that consent is revoked, it can be given again
  Terminates 
    consent // DIFF: retract the fact that models that consent has been given in the past

Duty duty to remove consent
  Holder controller
  Claimant subject
  Related to
    consent
    When consent.(personal data).person == subject.person

Act remove consent
  Actor controller
  Recipient subject
  Related to
    consent
    When consent.(personal data).person == subject.person
  Conditioned by
    controller &&
    subject &&
    stored consent() // `stored consent` must exist to make it removeable
  Terminates
    stored consent()

Act remove consent duty
  Actor controller
  Recipient subject
  Related to
    consent 
    When consent.(personal data).person == subject.person
  Conditioned by
    controller &&
    subject &&
    !stored consent() &&
    duty to remove consent()
  Terminates
    duty to remove consent()
  Present when Present duty to remove consent()

Act ask access
  Actor subject
  Recipient controller
  Related to
    personal data
  When personal data.person == subject.person
  Conditioned by
    subject &&
    controller
  Creates
    duty to enable access()

Duty duty to enable access
  Holder controller
  Claimant subject
  Related to personal data
  When personal data.person == subject.person

Act enable access
  Actor controller
  Recipient subject
  Related to personal data
    When personal data.person == subject.person
  Conditioned by
    controller &&
    subject &&
    stored data()
    // && duty to enable access // DIFF: this duty is not strictly necessary, as before
  Creates
    access(access holder = subject.person)
  Terminates
    duty to enable access()

Act ask removal
  Actor subject
  Recipient controller
  Related to
    personal data
    When personal data.person == subject.person
  Conditioned by
    subject && controller && personal data
  Creates
    duty to remove data()

Duty duty to remove data
  Holder controller
  Claimant subject
  Related to personal data

Act remove data
  Actor controller
  Recipient subject
  Related to personal data
    When personal data.person == subject.person
  Conditioned by 
    controller && subject &&
    stored data()  // DIFF: data must exist to make it removeable
  Terminates
    stored data() // DIFF

Act remove data duty
  Actor controller
  Recipient subject
  Related to personal data
    When personal data.person == subject.person
  Conditioned by
    controller && 
    subject &&
    !stored data() &&
    duty to remove data()
  Terminates
    duty to remove data()
  Present when Present duty to remove data()

Act notify breaches
  Actor controller
  Recipient subject
  Related to access
    When access.(personal data).person == subject.person
  Conditioned by
    controller &&
    subject &&
    duty to notify breaches()
  Terminates
    duty to notify breaches()
//  Derived from
//    notify breaches Where Present duty to notify breaches

Duty duty to notify breaches
  Holder controller
  Claimant subject
  Related to access
    When access.(personal data).person == subject.person
  Present when access && access.(access holder) != access.(personal data).person


##
Fact controller Identified by Telfort
Fact person Identified by Alice, Bob 
Fact datatype Identified by Phone_number, Address
###

person. subject. controller.
give consent. collect consent. remove consent. store data. remove data. use data. ask access. ask removal. request to modify consent. modify consent. enable access. notify breaches.

personal data(datatype = Phone_number, person = Bob).
personal data(datatype = Address, person = Alice).


